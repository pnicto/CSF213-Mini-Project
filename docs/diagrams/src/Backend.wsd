@startuml Backend

' !theme mars from https://raw.githubusercontent.com/plantuml/plantuml/master/themes

' This is not gonna be a table
' Now probably it is a table

' TODO:Category and product association, Remove cart controller, Reports, Extend JPA Repository, Timestamps for user and orders and a reports contrloler with order repo

' TODO:Take a look at manager controller for getAll()

' *Entity classes
package models #DDDDDD {
  enum Role{
    ADMIN
    MANAGER
    CUSTOMER
  }

  abstract class User {
    -String username
    -String emailAddress
    -String userId
    -String phoneNumber
    -String password
    -Role role
    -LocalDate createdAt

    +String getUsername()
    +String getPhoneNumber()
    +String getUserId()
    +String getEmailAddress()
    +String getPassword()
    +LocalDate getCreatedAtTime()
    +String getRole()
    +String setUsername()
    +String setPhoneNumber()
    +String setUserId()
    +String setEmailAddress()
    +String setPassword()
  }

  class Admin Extends User{
  }

  class Manager Extends User{
  }

  class Customer Extends User{
    -float moneyInWallet
    -Cart cart

    +float getMoneyInWallet()
    +void setMoneyInWallet()
  }

  class Product{
    -float price
    -int stock
    -int serialNumber
    -String description
    -String name
    -String image
    -int categoryId
    -int deliveryTime

    +float getPrice()
    +int getStock()
    +int getSerialNumber()
    +String getDescription()
    +String getName()
    +String getImage()
    +int getCategoryId()
    +int getDeliveryTime()
    +void setPrice()
    +void setStock()
    +void setDescription()
    +void setSerialNumber()
    +void setName()
    +void setImage()
    +void setCategoryId()
    +void setDeliveryTime()
  }

  ' This is is gonna be a table too
  class Category{
    -int categoryId
    -String name
    +int getCategoryId()
    +String getCategoryName()
    +void setCategoryId()
    +void setCategoryName()
  }

  class Cart {
    -ArrayList<HashMap<Product, Integer>> productsWithQuantity
    -int totalPrice
    -int totalItems
    +int getTotalPrice()
    +int getTotalItemCount()
    +ArrayList<HashMap<Product, Integer>> getProductsInCartWithQuantity()
    +void setProductsInCartWithQuantity()
    +ArrayList<HashMap<Product, Integer>> addItemToCart()
    +void emptyCart()
    +void removeItemFromCart()
  }

  ' TODO:Order class
  ' Order
  class Order{
    -int orderId
    -ArrayList<HashMap<Product, int>> productsInOrder
    -int customerId
    -boolean deliveryStatus
    -LocalDate orderedAt

    +int getOrderId()
    +int getCustomerId()
    +boolean getDeliveryStatus()
    +LocalDate getOrderAt()
    +ArrayList<HashMap<Product, int>> getProductsInOrder()
    +void setCustomerId()
    +void setDeliveryStatus()
    +void setProductsInOrder()
  }
}

' *Repositories
' This extends JPA repository
package repositories #DDDDDD{

  note  "All repositories extend the JpaRepository interface provided by Hibernate" as n1

  interface CustomerRepository{
    +ArrayList<Customer> findAll()
    +Customer findById()
    +Customer findByEmail()
    +void save()
    +void deleteById()
    ' +void addItemToCart()
    ' +void removeItemFromCart()
    ' +int getTotalItemCount()
    ' +int getTotalCartCost()
    ' +boolean isMoneyInWalletEmpty()
    ' +void updateMoneyInWallet()
    ' +Order getOrder()
    ' +ArrayList<Order> getAllOrders()
  }

  interface AdminRepository {
    +Admin findByEmail()
    +void save()
    +void deleteById()
  }

  interface ManagerRepository{
    +ArrayList<Manager> findAll()
    +Manager findByEmail()
    +void save()
    +void deleteById()

  }

  ' interface CartRepository {
  '   +Cart getCart()
  '   +int getTotalPrice()
  '   +int getTotalItemCount()
  '   +void addItemToCart()
  '   +void removeItemFromCart()
  '   +void emptyCart()
  ' }

  interface CategoryRepository{
    +Category findByName()
  }

  interface OrderRepository{

  }

  interface ProductRepository{
    +Product findById()
    +void deleteById()
  }

  interface UserRepository{

  }

  n1 .. OrderRepository
  n1 .. CategoryRepository
  n1 .. ManagerRepository
  n1 .. AdminRepository
  n1 .. CustomerRepository
  n1 .. ProductRepository
  n1 .. UserRepository
}

' *Controllers
package controllers #DDDDDD {
  class ManagerController {
    -ManagerRepository managerRepository

    +Manager addManager()
    +void removeManager()
    +void updateManager()
  }

  class CustomerController {
    -CustomerRepository customerRepository

    +ArrayList<Customer> getAllCustomers()
    +Customer getCustomer()
    +void createCustomerAccount()
    +void deleteCustomerAccount()
    +void updateCustomerAccount()
    +boolean isMoneyInWalletEmpty()
    +void updateMoneyInWallet()

    +void addItemToCart()
    +void removeItemFromCart()
    +int getTotalItemCount()
    +int getTotalCartCost()
    +void checkoutCart()


    +Order getOrder()
    +ArrayList<Order> getAllOrders()
  }

  class AdminController {
    -AdminRepository adminRepository
    +Admin getDetails()
    +void updateDetails()
  }

  ' TODO:Auth class
  class AuthorizationController{
    -UserRepository userRepository

    +String register()
    +String login()
  }

  class ProductController{
    -ProductRepository productRepository

    +ArrayList<Product> getAllProducts()
    +Product getProduct()
    +Product createNewProduct()
    +void updateProductDetails()
    +void deleteProduct()
  }

  class CategoryController{
    -CategoryRepository categoryRepository

    +void addCategory()
    +void deleteCategory()
    +void editCategory()
  }

  class ReportsController{
    -OrderRepository orderRepository
    -CustomerRepository customerRepository

    +int totalCustomersRegistered()
    +int totalNewRegistrationsInThirtyDays()
    +ArrayList<Order> getSalesInThirtyDays()
    +ArrayList<Product> getProductsNotInStock()
  }

  ' class CartController {
  '   -CartRepository CartRepository

  '   +Cart getCart()
  '   +int getTotalPrice()
  '   +int getTotalItemCount()
  '   +void addItemToCart()
  '   +void removeItemFromCart()
  '   +void emptyCart()
  ' }

}

' Relations
Customer *-- Cart : composition
Product "many" - "1" Category
Customer "1" -- "many" Order
Cart o-- Product : aggregation
Order o-- Product : aggregation
@enduml